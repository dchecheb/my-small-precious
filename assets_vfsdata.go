// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 9, 3, 13, 33, 36, 383859801, time.UTC),
		},
		"/asset_generate.go": &vfsgen۰CompressedFileInfo{
			name:             "asset_generate.go",
			modTime:          time.Date(2021, 9, 3, 13, 33, 0, 856744598, time.UTC),
			uncompressedSize: 321,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x34\x8e\xb1\x4a\x03\x31\x18\xc7\xe7\x7c\x4f\xf1\x99\xe9\x0e\x24\xb7\x0b\xdd\xa4\x2e\x82\x83\x0f\x20\xf1\x4c\xd2\x60\x2e\x39\x92\xb4\x20\xa5\x5b\x27\xad\x38\xb4\x42\x87\x3b\x50\x10\x14\xe7\x8e\xfa\x44\x49\xdf\x41\xea\xe9\xfa\xfb\xbe\x3f\xbf\x5f\xcb\xeb\x5b\xae\x04\x36\x5c\x5b\x00\xdd\xb4\xce\x47\x2c\x80\x50\xe3\x14\x05\x42\xad\x88\xd5\x24\xc6\x96\x02\x10\xaa\x74\x9c\x4c\xaf\x59\xed\x9a\x2a\x4c\xa6\xbe\x76\xee\xbc\x9a\xc9\xa0\x84\xa5\x50\x02\x54\x15\xf2\x10\x44\x0c\xb8\x7f\xda\xa5\xc7\x4d\xee\xb7\xb8\x7f\xde\xe6\x6e\x89\xe9\xf3\x23\xad\x5f\x70\xbf\x5a\xe5\xfe\x2b\xf7\x4b\x64\xac\x1a\x7e\xaf\x66\x32\xdc\xf0\xc8\x99\x72\x7f\xe7\xf4\xda\x61\x7a\x5f\xa5\x75\x97\xee\x37\x98\xbf\x37\x69\xdd\xe5\x7e\x97\x1e\xde\x18\xc8\xa9\xad\x7f\x5b\x8b\x12\xe7\x40\x66\xdc\xa3\x0c\x78\x08\x64\x63\x6d\xc4\xe5\x5d\x88\xa2\xc1\xd1\x40\x4e\xb5\x2f\xe8\x60\xa1\x25\x10\xe1\x3d\x9e\x8c\x70\x08\x66\x67\xc2\x0a\xcf\xa3\x28\x64\x38\xfe\x67\x17\x6d\xd4\xce\x86\xf9\xa2\x04\xa2\x25\x1e\x06\x47\x23\xb4\xda\x1c\x5c\xc4\x38\xc5\xc6\x3c\x72\x63\x6c\x21\xbc\x2f\x81\x2c\x60\x01\x3f\x01\x00\x00\xff\xff\x7e\xda\x84\x91\x41\x01\x00\x00"),
		},
		"/template": &vfsgen۰DirInfo{
			name:    "template",
			modTime: time.Date(2021, 9, 3, 13, 33, 36, 383859634, time.UTC),
		},
		"/template/signin.html": &vfsgen۰CompressedFileInfo{
			name:             "signin.html",
			modTime:          time.Date(2021, 9, 3, 13, 33, 36, 384000000, time.UTC),
			uncompressedSize: 2475,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xa4\x56\x5b\x6f\xdb\x38\x13\x7d\xf7\xaf\x98\xea\x7b\x90\x5c\xd8\x54\xdd\x24\xad\xeb\xc6\x01\xd2\x5c\xbe\x35\xda\x45\x83\x5c\x1a\x6c\x17\x8b\x82\x26\x47\x16\x6b\x8a\x24\x48\xca\xae\xbb\xc8\x7f\x5f\x88\xb6\x65\x29\x4e\xb0\x58\xf4\x29\xd1\x70\xe6\x9c\xb9\x1c\x0e\x7d\x9c\x23\xe5\x27\x1d\x00\x80\x63\xc7\xac\x30\x1e\x9c\x65\xe3\x28\xf7\xde\xb8\x51\x9a\x2e\x97\x4b\x32\x73\x9e\x7a\xc1\x08\xd3\x45\x9a\x09\x8b\x53\xea\xf0\xbb\x4b\x4b\x91\x1e\x92\x21\x19\xd4\xb6\x7e\x29\xfa\xb4\xf4\x39\xf9\xee\xa2\x93\xe3\x74\x0d\xb7\xc1\x96\x42\xcd\xc1\xaf\x0c\x8e\x23\x8f\x3f\x7c\xca\x9c\x8b\xc0\xa2\x1c\x47\xce\xaf\x24\xba\x1c\xd1\x47\x90\x5b\xcc\x7e\x91\x3b\x00\xa7\x27\x9d\xe3\x74\x5d\x59\xe7\x78\xaa\xf9\xaa\xca\xe2\xbf\xd6\x37\x6c\x13\x50\x63\xf6\x0a\xfb\x55\xc8\xa7\x9a\x55\xc1\xe6\x83\x93\x7b\x94\x4c\x17\x08\x5e\xc3\xef\x2b\x38\x5d\xa2\xab\xbe\x4e\x8d\x39\x4e\xf3\x41\xe0\xe6\x62\x01\x82\x8f\xa3\x2d\xdc\xa6\x03\x7d\xa6\x95\xa7\x42\xa1\xad\x70\xb9\x58\xb4\x9c\xa5\xa6\xbc\x3a\xf9\xa4\x29\x17\x6a\x46\x08\xa9\x7d\x76\xf5\x9c\x74\xc2\xd0\xd2\x14\x26\x4a\x78\x41\xa5\xf8\x89\x70\xb9\xa1\x09\x47\x0b\x6a\x61\xcb\x7b\xa6\x55\x26\x66\x30\x86\xbf\xc3\x11\x00\x35\xe2\x23\xae\x46\x10\x9d\x4e\x7e\xd2\x9b\xd5\x87\xd9\x14\xf9\x5d\x61\xbf\xdd\x67\x5f\xec\xed\x67\xfd\x07\x7b\x8d\x6f\xa4\xec\xf3\xcb\xaf\xc3\xa3\x0b\xff\xf1\x34\xea\x6d\x03\x4b\x9f\x9f\xeb\x82\x0a\x35\x82\x68\xae\x1d\x95\x94\x16\xfd\xec\xdd\xe1\xc1\x21\xd9\xb2\x55\x63\x60\xba\xa8\x63\x8c\xd5\xdf\x91\xf9\x09\xdf\x0b\xa9\x5d\x9c\xd7\x96\xce\xf0\x43\xc9\xe6\xe8\xf7\x91\xa9\x31\xce\x68\xdf\x42\x2d\xd0\x39\x3a\x13\x6a\x76\x83\x8a\xa3\x0d\xe8\x07\x87\x6f\x8e\x5e\x1d\x0d\x5e\x1d\x1c\x0c\x86\xbb\x94\x8d\x09\x87\x83\x51\xf3\x78\xb4\xc4\xe9\xe8\x88\x0d\xa7\x83\x77\x87\x9c\xbf\x1d\x0e\xa7\x7c\xf8\x8e\x67\xc3\x37\x6f\xdf\x36\x28\xa8\x2b\x2d\x16\xa8\xd6\xc9\xff\xbf\x7f\x71\xfd\xea\xeb\xeb\xd7\xc3\xa3\xab\xc3\x28\xf8\x3c\xbc\x0f\x7f\xb6\x95\x13\x51\x0f\xe3\xd4\x98\xa4\xdd\xfe\x6e\x3d\xb2\xed\x9c\xe0\x6e\x12\x4c\x4c\x2b\xe7\xa1\x14\x30\x06\x85\x4b\xd8\xa9\x85\x04\xf9\x9d\x96\x3e\xbf\x9b\xd4\x68\xc1\x98\x74\xbb\xef\x3b\xad\xe0\xbd\x19\x33\x2a\xe5\x94\xb2\xb9\x1b\xd5\x26\x00\x27\x66\x6a\xa2\x6e\x4a\xc6\xd0\xb9\x7b\xe1\xf3\x0a\xfc\x1a\x5d\x29\xfd\x08\xb2\x52\x31\x2f\xb4\x4a\x68\x6d\xec\x81\x45\x2e\x2c\x32\x7f\x67\x65\xb7\x01\xd4\x28\x7a\x9d\x0f\x61\xa5\xb5\xa8\xfc\x9d\x43\x4b\x66\xe8\x27\xfc\x56\xcf\x51\x25\xe9\x4b\xc8\xb4\x65\x78\x8d\x99\x45\x97\xc3\xcb\x14\xbc\x2d\xb1\xdb\x40\x22\x3e\x47\x95\xd4\xec\x62\x1d\xd9\x66\x5b\x17\xaa\x25\x12\xa9\x67\xb5\xcb\xfb\x47\x1e\x66\xf5\xe4\xd1\x43\x97\x30\xea\x59\xbe\xe3\x40\x6b\xb5\x7d\xcc\x60\xd1\x97\x56\x41\x46\xa5\xc3\x76\x78\xf3\xeb\x69\xaf\x87\x5e\xfd\x6f\x29\x6e\x72\xbd\x54\x8d\x7e\xb6\x89\xd2\x14\x6e\x73\x84\xa5\xe0\x33\xf4\x20\x1c\xd8\xa0\x60\xe4\xa4\xed\xf4\x9b\xe0\x08\x3e\x47\x58\x6f\x84\xe6\x29\xd7\xac\xac\x64\x59\x35\xfa\x42\x06\x85\x7e\x58\x4d\x78\x12\xaf\x5d\xe3\x2e\x09\x3b\x9b\x70\xe1\x8c\xa4\x2b\x18\x43\xac\xb4\xc2\xb8\x91\x6f\xe7\x51\xde\x69\x0a\xf7\x42\x4a\x28\x1d\x82\xd1\xa6\x34\xd5\xd8\x60\x72\x7e\x05\x57\x56\x2f\x04\x47\xeb\x82\x7a\xfa\x42\x41\x26\xf5\x12\x84\x72\x1e\x29\x07\x9d\x85\x24\x39\x66\xb4\x25\x98\x6d\xbe\x6b\xc9\x5d\x4a\xbd\x1c\x41\x1c\x90\xe3\x5e\xe7\x09\x35\xde\x59\x39\x82\x98\xa4\x53\x49\x73\x92\xfb\x42\x3e\x72\xfb\x6c\xaa\x5e\xba\x11\xfc\xd9\x69\x34\xe9\x13\xd2\xc5\xa6\x4b\x42\xa1\x03\xea\xaa\x8e\x56\xa9\x57\x36\x53\xa7\xbe\xd2\x25\x2c\xa9\xf2\xd5\xb6\xd6\x59\x86\xb6\xb2\xd8\xaa\x5a\xeb\x76\x9d\x6d\x69\x9a\x5c\x14\x54\xc8\xea\x82\x6c\x3b\x40\xae\xae\x3f\x7f\x99\x9c\x5f\x5c\x7f\x9b\x9c\xf7\x9e\x09\xba\xa4\x0c\xa7\x5a\xcf\xff\x2d\xee\xaf\xde\x76\x83\x74\xd6\xa2\x21\xce\x53\xeb\x93\xf8\x7f\xcf\xbe\x16\x71\xaf\xbe\xe7\x41\x91\xbb\x37\xa9\xfa\x78\xd1\xef\x87\x1b\x10\x64\xe7\xa0\xdf\x3f\x69\x3e\x17\x21\xd1\x8d\x1e\x83\xdb\xad\x3e\x93\xc2\x4c\x35\xb5\x3c\x59\xd0\xc6\xdd\x5e\x2f\x14\x0f\xe3\x9d\xca\x98\x45\xea\x71\x23\xb4\x24\xfc\x3c\xa0\x16\x69\x54\xdf\x8b\xda\xb3\x7a\xc9\xab\x75\x8d\x8a\x9f\xe5\x42\xf2\xc4\xd7\x3e\x9e\x2c\xa8\x2c\x11\xc6\xb0\xa0\x72\x67\x74\x28\x91\xf9\x64\x1f\x0a\x7f\x20\x3b\xd3\x45\x41\x15\x4f\xe2\x2a\xe3\xf8\x19\x3a\x8b\x85\x5e\x60\x9b\xee\xa1\xb3\x5f\x71\x12\xf8\x9b\x85\xee\x75\xa1\xc4\x9a\xa3\xb9\x6e\xe2\x33\x6d\x04\xf2\x17\x71\x8d\xfe\xb8\xf9\x69\xf8\x09\xf3\x4f\x00\x00\x00\xff\xff\x85\x76\x44\xd4\xab\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/asset_generate.go"].(os.FileInfo),
		fs["/template"].(os.FileInfo),
	}
	fs["/template"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/template/signin.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
